import discord
import psutil
import datetime
import os
import random
import platform
from discord.ext import commands
from modules import jbot_db, confirm, page


class Utils(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.jbot_db_global = jbot_db.JBotDB("jbot_db_global")
        self.jbot_db_warns = jbot_db.JBotDB("jbot_db_warns")

    @commands.command(name="ÏïàÎÖï", description="Hello, World!")
    async def hello(self, ctx):
        hello_world = ["Hello, World!",
                       "World, Hello!",
                       "hello world",
                       "```py\nprint('Hello, World!')```",
                       "```c\n#include <stdio.h>\n\nvoid main()\n{\n    printf('Hello, World!');\n}\n```",
                       "ÏïàÎÖï, ÏÑ∏ÏÉÅ!",
                       "hELLO< wORLD1"]
        await ctx.send(random.choice(hello_world))

    @commands.command(name="hellothisisverification", description="KOREANBOTS Ïù∏Ï¶ùÏö© Î™ÖÎ†πÏñ¥ÏûÖÎãàÎã§.")
    async def hellothisisverification(self, ctx):
        await ctx.send("eunwoo1104#9600 (ID: 288302173912170497)")

    @commands.command(name="Ìïë", description="Î¥áÏùò ÌïëÏùÑ ÏïåÎ†§Ï§çÎãàÎã§.")
    async def ping(self, ctx):
        bot_latency = round(self.bot.latency * 1000)
        shard_latency_list = self.bot.latencies
        embed = discord.Embed(title=":ping_pong: ÌêÅ!", description=f"Î¥á Î†àÏù¥ÌÑ¥Ïãú: {bot_latency}ms", colour=discord.Color.from_rgb(225, 225, 225))
        for x in shard_latency_list:
            if len(shard_latency_list) == 0:
                break
            embed.add_field(name=f"ÏÉ§Îìú {x[0]}", value=f"{int(x[1])}ms")
        await ctx.send(embed=embed)

    @commands.command(name="Ïù¥Î™®ÏßÄÏ†ïÎ≥¥", description="Ïù¥Î™®ÏßÄ Ï†ïÎ≥¥Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.")
    async def emoji_info(self, ctx, emoji: discord.Emoji = None):
        if emoji is None:
            return await ctx.send("Ïù¥Î™®ÏßÄÎ•º Î™ª Ï∞æÏïòÏäµÎãàÎã§.")
        embed = discord.Embed(title="Ïù¥Î™®ÏßÄ Ï†ïÎ≥¥", description=str(emoji.name), color=discord.Colour.from_rgb(225, 225, 225))
        embed.set_thumbnail(url=str(emoji.url))
        embed.add_field(name="ID", value=str(emoji.id))
        embed.add_field(name="ÏÉùÏÑ±Ïùº", value=str(emoji.created_at.strftime("%Y-%m-%d %I:%M:%S %p")))
        await ctx.send(embed=embed)

    @commands.command(name="Ï†ïÎ≥¥", description="Î¥áÏùò Ï†ïÎ≥¥Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.")
    async def jbot_info(self, ctx):
        servers = len(self.bot.guilds)
        users = len(list(self.bot.get_all_members()))
        p = psutil.Process(os.getpid())
        uptime_bot = str(datetime.datetime.now() - datetime.datetime.fromtimestamp(p.create_time()))
        uptime_bot = uptime_bot.split(".")[0]
        embed = discord.Embed(title="Ï†úÏù¥Î¥á Ï†ïÎ≥¥", description="Developed by [eunwoo1104](https://discord.gg/nJuW3Xs) (Originally by Team EG)", colour=discord.Color.from_rgb(225, 225, 225))
        embed.add_field(name="ÌååÏù¥Ïç¨ Î≤ÑÏ†Ñ", value=platform.python_version(), inline=False)
        embed.add_field(name="discord.py Î≤ÑÏ†Ñ", value=discord.__version__, inline=False)
        embed.add_field(name="Îì§Ïñ¥ÏôÄ ÏûàÎäî ÏÑúÎ≤ÑÏàò", value=str(servers) + "Í∞ú", inline=False)
        embed.add_field(name="Í∞ôÏù¥ ÏûàÎäî Ïú†Ï†ÄÏàò", value=str(users) + "Î™Ö", inline=False)
        embed.add_field(name="ÏóÖÌÉÄÏûÑ", value=uptime_bot, inline=False)
        embed.set_thumbnail(url=self.bot.user.avatar_url)
        await ctx.send(embed=embed)

    @commands.group(name="ÏÑúÎ≤Ñ", description="ÏÑúÎ≤Ñ Ï†ïÎ≥¥Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.", aliases=["ÏÑúÎ≤ÑÏ†ïÎ≥¥"])
    async def guild_info(self, ctx):
        if ctx.invoked_subcommand is None:
            embed = discord.Embed(title='ÏÑúÎ≤Ñ Ï†ïÎ≥¥ Î™ÖÎ†πÏñ¥', colour=discord.Color.from_rgb(225, 225, 225))
            embed.add_field(name="ÏÑúÎ≤Ñ Ï†ïÎ≥¥", value="ÏÑúÎ≤ÑÏùò Ï†ïÎ≥¥Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.", inline=False)
            embed.add_field(name="ÏÑúÎ≤Ñ Ïó≠Ìï†", value="ÏÑúÎ≤ÑÏùò Ïó≠Ìï† Î¶¨Ïä§Ìä∏Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.", inline=False)
            embed.add_field(name="ÏÑúÎ≤Ñ Ïù¥Î™®ÏßÄ", value="ÏÑúÎ≤ÑÏùò Ïù¥Î™®ÏßÄ Î¶¨Ïä§Ìä∏Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.", inline=False)
            await ctx.send(embed=embed)

    @guild_info.command(name="Ï†ïÎ≥¥")
    async def guild_info_info(self, ctx):
        guild = ctx.guild
        roles = guild.roles
        embed = discord.Embed(title='ÏÑúÎ≤ÑÏ†ïÎ≥¥', colour=discord.Color.from_rgb(225, 225, 225))
        embed.set_author(name=f'{guild.name}', icon_url=guild.icon_url)
        embed.set_thumbnail(url=guild.icon_url)
        embed.add_field(name='ÏÜåÏú†Ïûê', value=f'{guild.owner.mention}')
        embed.add_field(name='Ïú†Ï†ÄÏàò', value=f'{guild.member_count}Î™Ö')
        embed.add_field(name='ÏÑúÎ≤ÑÍ∞Ä ÏÉùÏÑ±Îêú ÎÇ†Ïßú', value=f'{guild.created_at.strftime("%Y-%m-%d %I:%M:%S %p")}')
        embed.add_field(name="Ï±ÑÎÑêÏàò",
                        value=f"Ï±ÑÌåÖ Ï±ÑÎÑê {str(len(guild.text_channels))}Í∞ú\nÏùåÏÑ± Ï±ÑÎÑê {str(len(ctx.guild.voice_channels))}Í∞ú\nÏπ¥ÌÖåÍ≥†Î¶¨ {str(len(ctx.guild.categories))}Í∞ú")
        embed.add_field(name="ÏÑúÎ≤Ñ Î∂ÄÏä§Ìä∏ Î†àÎ≤®", value=str(guild.premium_tier) + 'Î†àÎ≤®')
        embed.add_field(name="ÏÑúÎ≤Ñ Î∂ÄÏä§Ìä∏ Ïàò", value=str(guild.premium_subscription_count) + 'Í∞ú')
        embed.add_field(name='Ïó≠Ìï†Ïàò', value=str(len(guild.roles)) + 'Í∞ú')
        embed.add_field(name='ÏÑúÎ≤Ñ ÏµúÍ≥† Ïó≠Ìï†', value=f'{roles[-1].mention}')
        embed.add_field(name='ÏÑúÎ≤Ñ ÏúÑÏπò', value=f'{guild.region}')
        await ctx.send(embed=embed)

    @guild_info.command(name="Ïó≠Ìï†")
    async def guild_info_roles(self, ctx):
        guild = ctx.guild
        roles = guild.roles
        role_list = [x.mention for x in roles]
        embed = discord.Embed(title='ÏÑúÎ≤Ñ Ïó≠Ìï†Îì§', description=', '.join(role_list), colour=discord.Color.from_rgb(225, 225, 225))
        await ctx.send(embed=embed)

    @guild_info.command(name="Ïù¥Î™®ÏßÄ")
    async def guild_info_emoji(self, ctx):
        guild = ctx.guild
        emojis = guild.emojis
        emoji_list = [str(x) for x in emojis]
        embed = discord.Embed(title='ÏÑúÎ≤Ñ Ïù¥Î™®ÏßÄ', description=', '.join(emoji_list),
                              colour=discord.Color.from_rgb(225, 225, 225))
        await ctx.send(embed=embed)

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload: discord.RawReactionActionEvent):
        emoji = payload.emoji
        if str(emoji) not in ["üìå", "‚≠ê"]:
            return
        msg_data = await self.jbot_db_global.res_sql("SELECT * FROM starboard WHERE msg_id=?", (payload.message_id,))
        if not bool(msg_data):
            await self.jbot_db_global.exec_sql("INSERT INTO starboard(msg_id) VALUES (?)", (payload.message_id,))
            msg_data = await self.jbot_db_global.res_sql("SELECT * FROM starboard WHERE msg_id=?", (payload.message_id,))
            count = 1
        else:
            count = msg_data[0]["count"] + 1
        if bool(msg_data[0]["posted"]):
            return
        await self.jbot_db_global.exec_sql("UPDATE starboard SET count=? WHERE msg_id=?", (count, payload.message_id))
        if count == 3 or bool(str(emoji) == "‚≠ê" and payload.member.id == payload.member.guild.owner.id):
            guild = self.bot.get_guild(payload.guild_id)
            await self.jbot_db_global.exec_sql("UPDATE starboard SET posted=? WHERE msg_id=?", (1, payload.message_id))
            guild_setup = await self.jbot_db_global.res_sql("SELECT * FROM guild_setup WHERE guild_id=?", (payload.guild_id,))
            starboard_channel = guild.get_channel(guild_setup[0]["starboard_channel"])
            if starboard_channel is None:
                return
            msg = await guild.get_channel(payload.channel_id).fetch_message(payload.message_id)
            await msg.add_reaction("‚úÖ")
            embed = discord.Embed(title="Î©îÏãúÏßÄ Î∞ïÏ†ú", description=f"[Î©îÏãúÏßÄ Î∞îÎ°úÍ∞ÄÍ∏∞]({msg.jump_url})")
            embed.set_author(name=msg.author.display_name + f" ({msg.author})", icon_url=msg.author.avatar_url)
            embed.add_field(name="Î©îÏãúÏßÄ ÎÇ¥Ïö©", value=msg.content if msg.content else "(ÎÇ¥Ïö© ÏóÜÏùå)", inline=False)
            if bool(msg.attachments):
                to_show = [x.url for x in msg.attachments if (x.filename.split(".")[-1]).lower() in ['png', 'webp', 'jpg', 'jpeg', 'gif', 'bmp']]
                embed.add_field(name="ÏÇ¨ÏßÑ", value=f"{len(to_show) if bool(to_show) else 0}Í∞ú", inline=False)
                if len(to_show) != 0:
                    embed.set_image(url=to_show[0])
            await starboard_channel.send(embed=embed)

    @commands.command(name="Í±¥Ïùò", description="Í∞úÎ∞úÏûêÏóêÍ≤å Í±¥ÏùòÏÇ¨Ìï≠ÏùÑ Î≥¥ÎÉÖÎãàÎã§.")
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def tix(self, ctx, *, ticket):
        msg = await ctx.send("Ï†ïÎßêÎ°ú Í±¥ÏùòÏÇ¨Ìï≠ÏùÑ Î≥¥ÎÇºÍπåÏöî?\nÏû•ÎÇúÏúºÎ°ú Î≥¥ÎÇ¥Îäî Îì± Î∂àÌïÑÏöîÌïòÍ≤å Í±¥ÏùòÏÇ¨Ìï≠ÏùÑ Î≥¥ÎÇ¥Îäî Í≤ΩÏö∞ Í±¥ÏùòÏÇ¨Ìï≠ Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÍ≤å Îê† ÏàòÎèÑ ÏûàÏäµÎãàÎã§.")
        res = await confirm.confirm(self.bot, ctx, msg)
        if res is True:
            owner = self.bot.get_user(288302173912170497)
            await owner.send(f"`Í±¥ÏùòÏÇ¨Ìï≠ ({ctx.author} / {ctx.author.id})`")
            await owner.send(ticket)
            return await ctx.send("ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í±¥ÏùòÏÇ¨Ìï≠ÏùÑ Î≥¥ÎÉàÏäµÎãàÎã§!")
        await ctx.send("Í±¥ÏùòÏÇ¨Ìï≠ Î≥¥ÎÇ¥Í∏∞Í∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.")

    @commands.command(name="Í≤ΩÍ≥†Î¶¨Ïä§Ìä∏", description="ÏûêÏã†Ïù¥ Î≥¥Ïú†Ìïú Í≤ΩÍ≥†Îì§ÏùÑ Î≥¥Ïó¨Ï§çÎãàÎã§.", aliases=["Í≤ΩÍ≥†Î≥¥Í∏∞"])
    async def warn_list(self, ctx, user: discord.Member = None):
        user = user if user is not None else ctx.author
        warn_list = await self.jbot_db_warns.res_sql(f"""SELECT * FROM "{ctx.guild.id}_warns" WHERE user_id=?""", (user.id,))
        if not bool(warn_list):
            return await ctx.send(f"{user.mention}ÎãòÏùÄ Î∞õÏùÄ Í≤ΩÍ≥†Í∞Ä ÏóÜÏäµÎãàÎã§.")
        base_embed = discord.Embed(title=f"{user.name}ÎãòÏùò Í≤ΩÍ≥†Î¶¨Ïä§Ìä∏", description=f"Ï¥ù {len(warn_list)}Í∞ú", colour=discord.Color.red())
        embed_list = []
        tgt_embed = base_embed.copy()
        count = 0
        for x in warn_list:
            if count != 0 and count % 5 == 0:
                embed_list.append(tgt_embed)
                tgt_embed = base_embed.copy()
            issued_by = ctx.guild.get_member(x['issued_by'])
            issued_by = issued_by.mention if issued_by is not None else f"Ïù¥ÎØ∏ Ïù¥ ÏÑúÎ≤ÑÏóêÏÑú ÎÇòÍ∞Ñ Ïú†Ï†ÄÏûÖÎãàÎã§. (Ïú†Ï†Ä ID: {x['issued_by']})"
            tgt_embed.add_field(name="Í≤ΩÍ≥†Î≤àÌò∏: " + str(x["date"]), value=f"Í≤ΩÍ≥†Î•º Î∂ÄÏó¨Ìïú Ïú†Ï†Ä: {issued_by}\nÏÇ¨Ïú†: {x['reason']}", inline=False)
            count += 1
        embed_list.append(tgt_embed)
        await page.start_page(bot=self.bot, ctx=ctx, lists=embed_list, embed=True)

    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload: discord.RawReactionActionEvent):
        emoji = payload.emoji
        if str(emoji) not in ["üìå", "‚≠ê"]:
            return
        msg_data = await self.jbot_db_global.res_sql("SELECT * FROM starboard WHERE msg_id=?", (payload.message_id,))
        if not bool(msg_data):
            return
        if bool(msg_data[0]["posted"]):
            return
        count = msg_data[0]["count"] - 1
        if count == 0:
            return await self.jbot_db_global.exec_sql("DELETE FROM starboard WHERE msg_id=?", (payload.message_id,))
        await self.jbot_db_global.exec_sql("UPDATE starboard SET count=? WHERE msg_id=?", (count, payload.message_id))


def setup(bot):
    bot.add_cog(Utils(bot))
